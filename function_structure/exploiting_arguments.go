package hangman

import (
	"fmt"
	"os"
)

func Arg() Game {
	var game Game
	arguments := os.Args[1:]
	needFile := true
	for index, arg := range arguments {
		switch arg {
		case "--startWith", "-sw":
			if needFile && index != 0 {
				os.Exit(3)
			} else {
				needFile = true
			}
			game.save = true
			if len(arguments) > index+1 {
				game.saveFile = arguments[index+1]
			} else {
				os.Exit(3)
			}

		case "--classic", "-c":
			if needFile && index != 0 {
				os.Exit(3)
			} else {
				needFile = false
			}
			if game.ascii {
				os.Exit(4)
			} else {
				game.classic = true
			}
		case "--ascii", "-a":
			if needFile && index != 0 {
				os.Exit(3)
			} else {
				needFile = false
			}
			if game.classic {
				os.Exit(4)
			} else {
				game.ascii = true
			}
		case "--letterFile", "-lf":
			if needFile && index != 0 {
				os.Exit(3)
			} else {
				needFile = true
			}
			if game.classic {
				os.Exit(4)
			} else {
				game.letter = true
			}
			if len(arguments) > index+1 {
				game.letterFile = arguments[index+1]
			} else {
				os.Exit(3)
			}
		case "--rules", "-r":
			if needFile && index != 0 {
				os.Exit(3)
			} else {
				needFile = false
			}
			Rules()
			os.Exit(0)
		case "--help", "-h":
			if needFile && index != 0 {
				os.Exit(3)
			} else {
				needFile = false
			}
			Help()
			os.Exit(0)
		default:
			if needFile && index == 0 {
				game.dico = arguments[0]
			} else {
				os.Exit(3)
			}
			needFile = false
		}
	}
	return game
}

func ExploitingArgument(game Game) {
	var data HangManData
	if game.save {
		var err error
		data, err = Load("Ressources/Save/" + game.saveFile)
		if err != nil {
			fmt.Println("Error while loading the game state:", err)
			os.Exit(4)
		}
	} else {
		data.setData()
		dico := ReadTheDico(game.dico)
		data.SetWord(dico)
	}
	if !game.letter {
		game.letterFile = "standard.txt"
	}
	if game.classic {
		data.ClassicGame()
		os.Exit(0)
	}
	if game.ascii {
		AsciiGame()
		os.Exit(0)
	}
	Draw(data, game)
}

func AsciiGame() {
	fmt.Println("ok")
}
